
JtagUartSmall.elf:     file format elf32-littlenios2
JtagUartSmall.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000354 memsz 0x00000354 flags r-x
    LOAD off    0x00001374 vaddr 0x00008374 paddr 0x000083e4 align 2**12
         filesz 0x00000070 memsz 0x00000070 flags rw-
    LOAD off    0x00001454 vaddr 0x00008454 paddr 0x00008454 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  000013e4  2**0
                  CONTENTS
  2 .text         00000308  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00008328  00008328  00001328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000070  00008374  000083e4  00001374  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00008454  00008454  00001454  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00008460  00008460  000013e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001c8  00000000  00000000  00001408  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000014c3  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000097f  00000000  00000000  00002a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000009c1  00000000  00000000  00003412  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000200  00000000  00000000  00003dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000079c  00000000  00000000  00003fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000202  00000000  00000000  00004770  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00004974  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00004988  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000590a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000590d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00005919  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000591a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000591b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00005926  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00005931  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0000593c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  00005942  2**0
                  CONTENTS, READONLY
 26 .jdi          00003e94  00000000  00000000  0000595c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002d3a5  00000000  00000000  000097f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008328 l    d  .rodata	00000000 .rodata
00008374 l    d  .rwdata	00000000 .rwdata
00008454 l    d  .bss	00000000 .bss
00008460 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../JtagUartSmall_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000082f8 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
000081dc g     F .text	0000002c alt_main
000083e4 g       *ABS*	00000000 __flash_rwdata_start
00008208 g     F .text	00000038 alt_putstr
00008304 g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00008458 g     O .bss	00000004 alt_argv
000103cc g       *ABS*	00000000 _gp
00008374 g     O .rwdata	00000030 alt_fd_list
00008264 g     F .text	0000005c altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000083d0 g     O .rwdata	00000004 alt_max_fd
00008460 g       *ABS*	00000000 __bss_end
000080b8 g     F .text	00000044 alt_getchar
000083a4 g     O .rwdata	00000028 alt_dev_null
000082f4 g     F .text	00000004 alt_dcache_flush_all
000083e4 g       *ABS*	00000000 __ram_rwdata_end
000083d4 g     O .rwdata	00000008 alt_dev_list
00008374 g       *ABS*	00000000 __ram_rodata_end
000083cc g     O .rwdata	00000004 jtag_uart_0
00008460 g       *ABS*	00000000 end
00010000 g       *ABS*	00000000 __alt_stack_pointer
000082c0 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
00008260 g     F .text	00000004 alt_sys_init
00008374 g       *ABS*	00000000 __ram_rwdata_start
00008328 g       *ABS*	00000000 __ram_rodata_start
00008460 g       *ABS*	00000000 __alt_stack_base
00008454 g       *ABS*	00000000 __bss_start
0000805c g     F .text	0000005c main
00008454 g     O .bss	00000004 alt_envp
00008328 g       *ABS*	00000000 __flash_rodata_start
00008240 g     F .text	00000020 alt_irq_init
0000845c g     O .bss	00000004 alt_argc
000083dc g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
000083e4 g       *ABS*	00000000 _edata
00008460 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
00010000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
0000830c g     F .text	0000001c strlen
00008300 g     F .text	00000004 alt_icache_flush_all
000080fc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d680f314 	ori	gp,gp,972
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a11514 	ori	r2,r2,33876

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e11814 	ori	r3,r3,33888

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff7c78>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00080fc0 	call	80fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081dc0 	call	81dc <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff7c8c>

0000805c <main>:

	char * input;
	int count = 0;
	char cn='0';

  alt_putstr("Welcome to \"butlicker\", Type string:\n");
    805c:	01000074 	movhi	r4,1
 */

#include "sys/alt_stdio.h"

int main()
{ 
    8060:	defffd04 	addi	sp,sp,-12

	char * input;
	int count = 0;
	char cn='0';

  alt_putstr("Welcome to \"butlicker\", Type string:\n");
    8064:	2120ca04 	addi	r4,r4,-31960
 */

#include "sys/alt_stdio.h"

int main()
{ 
    8068:	dc400115 	stw	r17,4(sp)
    806c:	dc000015 	stw	r16,0(sp)
    8070:	dfc00215 	stw	ra,8(sp)
    8074:	0021883a 	mov	r16,zero

	char * input;
	int count = 0;
	char cn='0';

  alt_putstr("Welcome to \"butlicker\", Type string:\n");
    8078:	00082080 	call	8208 <alt_putstr>


  while((cn = alt_getchar() )!= '\n')
    807c:	04400284 	movi	r17,10
    8080:	00080b80 	call	80b8 <alt_getchar>
    8084:	10c03fcc 	andi	r3,r2,255
    8088:	18c0201c 	xori	r3,r3,128
    808c:	18ffe004 	addi	r3,r3,-128
    8090:	1c400326 	beq	r3,r17,80a0 <main+0x44>
  {
	  (*(input+count)) = cn;
    8094:	80800005 	stb	r2,0(r16)
    8098:	84000044 	addi	r16,r16,1
    809c:	003ff806 	br	8080 <_gp+0xffff7cb4>
	  count++;
  }
  alt_putstr(input);
    80a0:	0009883a 	mov	r4,zero
    80a4:	00082080 	call	8208 <alt_putstr>





  alt_putstr("\nHitting while 1 loop\n");
    80a8:	01000074 	movhi	r4,1
    80ac:	2120d404 	addi	r4,r4,-31920
    80b0:	00082080 	call	8208 <alt_putstr>
    80b4:	003fff06 	br	80b4 <_gp+0xffff7ce8>

000080b8 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    80b8:	00800074 	movhi	r2,1
    80bc:	10a0dd04 	addi	r2,r2,-31884
    80c0:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    80c4:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    80c8:	01000074 	movhi	r4,1
    80cc:	01800044 	movi	r6,1
    80d0:	d80b883a 	mov	r5,sp
    80d4:	2120f304 	addi	r4,r4,-31796
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    80d8:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    80dc:	00082640 	call	8264 <altera_avalon_jtag_uart_read>
    80e0:	0080020e 	bge	zero,r2,80ec <alt_getchar+0x34>
        return -1;
    }
    return c;
    80e4:	d8800007 	ldb	r2,0(sp)
    80e8:	00000106 	br	80f0 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    80ec:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    80f0:	dfc00117 	ldw	ra,4(sp)
    80f4:	dec00204 	addi	sp,sp,8
    80f8:	f800283a 	ret

000080fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    80fc:	deffff04 	addi	sp,sp,-4
    8100:	01000074 	movhi	r4,1
    8104:	01400074 	movhi	r5,1
    8108:	dfc00015 	stw	ra,0(sp)
    810c:	2120dd04 	addi	r4,r4,-31884
    8110:	2960f904 	addi	r5,r5,-31772

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8114:	2140061e 	bne	r4,r5,8130 <alt_load+0x34>
    8118:	01000074 	movhi	r4,1
    811c:	01400074 	movhi	r5,1
    8120:	21200804 	addi	r4,r4,-32736
    8124:	29600804 	addi	r5,r5,-32736
    8128:	2140121e 	bne	r4,r5,8174 <alt_load+0x78>
    812c:	00000b06 	br	815c <alt_load+0x60>
    8130:	00c00074 	movhi	r3,1
    8134:	18e0f904 	addi	r3,r3,-31772
    8138:	1907c83a 	sub	r3,r3,r4
    813c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8140:	10fff526 	beq	r2,r3,8118 <_gp+0xffff7d4c>
    {
      *to++ = *from++;
    8144:	114f883a 	add	r7,r2,r5
    8148:	39c00017 	ldw	r7,0(r7)
    814c:	110d883a 	add	r6,r2,r4
    8150:	10800104 	addi	r2,r2,4
    8154:	31c00015 	stw	r7,0(r6)
    8158:	003ff906 	br	8140 <_gp+0xffff7d74>
    815c:	01000074 	movhi	r4,1
    8160:	01400074 	movhi	r5,1
    8164:	2120ca04 	addi	r4,r4,-31960
    8168:	2960ca04 	addi	r5,r5,-31960

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    816c:	2140101e 	bne	r4,r5,81b0 <alt_load+0xb4>
    8170:	00000b06 	br	81a0 <alt_load+0xa4>
    8174:	00c00074 	movhi	r3,1
    8178:	18e00804 	addi	r3,r3,-32736
    817c:	1907c83a 	sub	r3,r3,r4
    8180:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8184:	10fff526 	beq	r2,r3,815c <_gp+0xffff7d90>
    {
      *to++ = *from++;
    8188:	114f883a 	add	r7,r2,r5
    818c:	39c00017 	ldw	r7,0(r7)
    8190:	110d883a 	add	r6,r2,r4
    8194:	10800104 	addi	r2,r2,4
    8198:	31c00015 	stw	r7,0(r6)
    819c:	003ff906 	br	8184 <_gp+0xffff7db8>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    81a0:	00082f40 	call	82f4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    81a4:	dfc00017 	ldw	ra,0(sp)
    81a8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    81ac:	00083001 	jmpi	8300 <alt_icache_flush_all>
    81b0:	00c00074 	movhi	r3,1
    81b4:	18e0dd04 	addi	r3,r3,-31884
    81b8:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    81bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    81c0:	18bff726 	beq	r3,r2,81a0 <_gp+0xffff7dd4>
    {
      *to++ = *from++;
    81c4:	114f883a 	add	r7,r2,r5
    81c8:	39c00017 	ldw	r7,0(r7)
    81cc:	110d883a 	add	r6,r2,r4
    81d0:	10800104 	addi	r2,r2,4
    81d4:	31c00015 	stw	r7,0(r6)
    81d8:	003ff906 	br	81c0 <_gp+0xffff7df4>

000081dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81dc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    81e4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    81e8:	00082400 	call	8240 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    81ec:	00082600 	call	8260 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81f0:	d1a02217 	ldw	r6,-32632(gp)
    81f4:	d1602317 	ldw	r5,-32628(gp)
    81f8:	d1202417 	ldw	r4,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81fc:	dfc00017 	ldw	ra,0(sp)
    8200:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8204:	000805c1 	jmpi	805c <main>

00008208 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    8208:	defffe04 	addi	sp,sp,-8
    820c:	dc000015 	stw	r16,0(sp)
    8210:	dfc00115 	stw	ra,4(sp)
    8214:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    8218:	000830c0 	call	830c <strlen>
    821c:	01000074 	movhi	r4,1
    8220:	000f883a 	mov	r7,zero
    8224:	100d883a 	mov	r6,r2
    8228:	800b883a 	mov	r5,r16
    822c:	2120f304 	addi	r4,r4,-31796
#else
    return fputs(str, stdout);
#endif
#endif
}
    8230:	dfc00117 	ldw	ra,4(sp)
    8234:	dc000017 	ldw	r16,0(sp)
    8238:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    823c:	00082c01 	jmpi	82c0 <altera_avalon_jtag_uart_write>

00008240 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8240:	deffff04 	addi	sp,sp,-4
    8244:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8248:	00083040 	call	8304 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    824c:	00800044 	movi	r2,1
    8250:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8254:	dfc00017 	ldw	ra,0(sp)
    8258:	dec00104 	addi	sp,sp,4
    825c:	f800283a 	ret

00008260 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8260:	f800283a 	ret

00008264 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    8264:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    8268:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    826c:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8270:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8274:	11800b2e 	bgeu	r2,r6,82a4 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8278:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    827c:	1a60000c 	andi	r9,r3,32768
    8280:	48000326 	beq	r9,zero,8290 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8284:	10c00005 	stb	r3,0(r2)
    8288:	10800044 	addi	r2,r2,1
    828c:	003ff906 	br	8274 <_gp+0xffff7ea8>
    else if (ptr != buffer)
    8290:	11400226 	beq	r2,r5,829c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    8294:	1145c83a 	sub	r2,r2,r5
    8298:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    829c:	403ff526 	beq	r8,zero,8274 <_gp+0xffff7ea8>
    82a0:	00000106 	br	82a8 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    82a4:	117ffb1e 	bne	r2,r5,8294 <_gp+0xffff7ec8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    82a8:	39d0000c 	andi	r7,r7,16384
    82ac:	3800021e 	bne	r7,zero,82b8 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    82b0:	00bffec4 	movi	r2,-5
    82b4:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    82b8:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    82bc:	f800283a 	ret

000082c0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    82c0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    82c4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    82c8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    82cc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    82d0:	2980072e 	bgeu	r5,r6,82f0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    82d4:	38c00037 	ldwio	r3,0(r7)
    82d8:	18ffffec 	andhi	r3,r3,65535
    82dc:	183ffc26 	beq	r3,zero,82d0 <_gp+0xffff7f04>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    82e0:	28c00007 	ldb	r3,0(r5)
    82e4:	20c00035 	stwio	r3,0(r4)
    82e8:	29400044 	addi	r5,r5,1
    82ec:	003ff806 	br	82d0 <_gp+0xffff7f04>

  return count;
}
    82f0:	f800283a 	ret

000082f4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    82f4:	f800283a 	ret

000082f8 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    82f8:	3005883a 	mov	r2,r6
    82fc:	f800283a 	ret

00008300 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8300:	f800283a 	ret

00008304 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8304:	000170fa 	wrctl	ienable,zero
    8308:	f800283a 	ret

0000830c <strlen>:
    830c:	2005883a 	mov	r2,r4
    8310:	10c00007 	ldb	r3,0(r2)
    8314:	18000226 	beq	r3,zero,8320 <strlen+0x14>
    8318:	10800044 	addi	r2,r2,1
    831c:	003ffc06 	br	8310 <_gp+0xffff7f44>
    8320:	1105c83a 	sub	r2,r2,r4
    8324:	f800283a 	ret
